generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlserver"
    url      = env("DATABASE_URL")
}

model User {
    id     String  @id // Clerk user id
    email  String  @unique
    name   String?
    bio    String?
    avatar String?

    website        String?
    github         String?
    linkedin       String?
    twitter        String?
    skills         String?
    university     String?
    graduationYear Int?

    memberOfTeams   Team[]         @relation("Members")
    ownedTeams      Team[]         @relation("Owner")
    registrations   Registration[] @relation("UserRegistrations")
    organizedEvents Event[]        @relation("EventOrganizer")
    judgedEvents    Event[]        @relation("EventJudges")
    scores          Score[]        @relation("JudgeScores")
    createdAt       DateTime       @default(now())
    updatedAt       DateTime       @updatedAt

    teamInvitesSent     TeamInvite[] @relation("TeamInviteInviter")
    teamInvitesReceived TeamInvite[] @relation("TeamInviteInvitee")
}

model Event {
    id             String         @id @default(cuid())
    title          String
    description    String
    theme          String?
    tracksJson     String?
    mode           String         @default("ONLINE")
    rules          String?
    timeline       String?
    prizes         String?
    sponsors       String?
    organizersJson String?
    faqsJson       String?        // Store FAQs as JSON string
    startAt        DateTime
    endAt          DateTime
    organizerId    String
    organizer      User           @relation("EventOrganizer", fields: [organizerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    judges         User[]         @relation("EventJudges")
    teams          Team[]
    registrations  Registration[]
    rounds         Round[]
    faqs           FAQ[]
    createdAt      DateTime       @default(now())
    updatedAt      DateTime       @updatedAt
    thumbnail      String?
    banner         String?
}

model FAQ {
    id        String   @id @default(cuid())
    question  String
    answer    String
    eventId   String
    event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Team {
    id            String         @id @default(cuid())
    name          String
    eventId       String
    event         Event          @relation(fields: [eventId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    ownerId       String
    owner         User           @relation("Owner", fields: [ownerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    members       User[]         @relation("Members")
    registrations Registration[] @relation("TeamRegistrations")
    invites       TeamInvite[]
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
}

model Registration {
    id        String   @id @default(cuid())
    eventId   String
    event     Event    @relation(fields: [eventId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    userId    String
    user      User     @relation("UserRegistrations", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    teamId    String?
    team      Team?    @relation("TeamRegistrations", fields: [teamId], references: [id], onDelete: SetNull, onUpdate: NoAction)
    createdAt DateTime @default(now())

    @@unique([eventId, userId])
}

model Round {
    id      String  @id @default(cuid())
    name    String
    index   Int
    eventId String
    event   Event   @relation(fields: [eventId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    scores  Score[]
}

model Score {
    id           String   @id @default(cuid())
    submissionId String // Mongo submission _id string
    roundId      String
    round        Round    @relation(fields: [roundId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    judgeId      String
    judge        User     @relation("JudgeScores", fields: [judgeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    score        Int
    feedback     String?
    createdAt    DateTime @default(now())

    @@unique([submissionId, roundId, judgeId])
}

model TeamInvite {
    id        String   @id @default(uuid())
    inviterId String
    inviter   User     @relation("TeamInviteInviter", fields: [inviterId], references: [id], onUpdate: NoAction, onDelete: NoAction)
    inviteeId String
    invitee   User     @relation("TeamInviteInvitee", fields: [inviteeId], references: [id], onUpdate: NoAction, onDelete: NoAction)
    status    String   @default("PENDING")
    Team      Team?    @relation(fields: [teamId], references: [id])
    createdAt DateTime @default(now())

    teamId String?

    @@unique([teamId, inviteeId])
}
